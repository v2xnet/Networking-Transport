/***************************************************************************
 *   ITSNET  Intelligent Transport System networking Stack                 *
 * 									   *							       *
 *   Copyright(C)2010 ESPRIT											   *
 * 	        "École supérieure privée d'ingénierie et de technologie"       *
 *                                                                         *
 *   barghich@gmail.com                                                    *
 *   anouar.chemek@gmail.com                                               *
 *  							                                           *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
/**
 * @file itsnet_ip.c
 * itsnet ip code.
 * @author Thouraya Toukabri
 * @author Tsukada Manabu
 * @author hichem BARGAOUI
 * @author anouar Chemek
 */

#include <stdint.h>
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <unistd.h>
#include <errno.h>
#ifdef HAVE_LIBPTHREAD
#include <pthread.h>
#else
#error "POSIX Thread Library required!"
#endif

#include <asm/types.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>

#include <netinet/if_ether.h>
#include <linux/if.h>
#include <linux/if_tun.h>


#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/time.h>


#include <netinet/if_ether.h>
#include <linux/if.h>
#include <linux/if_tun.h>

#include <syslog.h>
#include <time.h>


#include <netinet/in.h>
#include <netinet/ip.h>
#include <arpa/inet.h>
#include <linux/in_route.h>
#include "./include/linux/ip_mp_alg.h"

#include "./include/rt_names.h"
#include "./include/utils.h"

#include "position_sensor.h"
#include "itsnet_types.h"
#include "itsnet_header.h"

#include "itsnet_ip.h"
#include "geo_broadcast.h"
#include "geo_unicast.h"
#include "geo_anycast.h"


static pthread_mutex_t mutex;
static pthread_t itsnet_iplistener;

#define max(a,b) ((a)>(b) ? (a):(b))

struct rtnl_handle rth = { .fd = -1 };
int preferred_family = AF_UNSPEC;
int resolve_hosts = 0;

static struct
{
	int tb;
	int cloned;
	int flushed;
	char *flushb;
	int flushp;
	int flushe;
	int protocol, protocolmask;
	int scope, scopemask;
	int type, typemask;
	int tos, tosmask;
	int iif, iifmask;
	int oif, oifmask;
	int realm, realmmask;
	inet_prefix rprefsrc;
	inet_prefix rvia;
	inet_prefix rdst;
	inet_prefix mdst;
	inet_prefix rsrc;
	inet_prefix msrc;
} filter;


void iproute_reset_filter()
{
	memset(&filter, 0, sizeof(filter));
	filter.mdst.bitlen = -1;
	filter.msrc.bitlen = -1;
}

static inline int rtm_get_table(struct rtmsg *r, struct rtattr **tb)
{
	__u32 table = r->rtm_table;
	if (tb[RTA_TABLE])
		table = *(__u32*) RTA_DATA(tb[RTA_TABLE]);
	return table;
}

int print_route(const struct sockaddr_nl *who, struct nlmsghdr *n, void *arg)
{
	FILE *fp = (FILE*)arg;
	struct rtmsg *r = NLMSG_DATA(n);
	int len = n->nlmsg_len;
	struct rtattr * tb[RTA_MAX+1];
	char abuf[256];
	int host_len = -1;
	int i;
	__u32 table;
	char *c2c_id[4];
	char *tmpbuf=NULL;

	if (n->nlmsg_type != RTM_NEWROUTE && n->nlmsg_type != RTM_DELROUTE)
		{
			fprintf(stderr, "Not a route: %08x %08x %08x\n",
			        n->nlmsg_len, n->nlmsg_type, n->nlmsg_flags);
			return 0;
		}
	if (filter.flushb && n->nlmsg_type != RTM_NEWROUTE)
		return 0;
	len -= NLMSG_LENGTH(sizeof(*r));
	if (len < 0)
		{
			fprintf(stderr, "BUG: wrong nlmsg len %d\n", len);
			return -1;
		}

	if (r->rtm_family == AF_INET6)
		{
			host_len = 128;
		}
	else if (r->rtm_family == AF_INET)
		{
			printf("IPv4!\n");
			return 0;
		}
	else if (r->rtm_family == AF_DECnet)
		{
			printf("DECnet!\n");
			return 0;
		}
	else if (r->rtm_family == AF_IPX)
		{
			printf("IPX!\n");
			return 0;
		}

	parse_rtattr(tb, RTA_MAX, RTM_RTA(r), len);
	table = rtm_get_table(r, tb);

	if (tb[RTA_GATEWAY] && filter.rvia.bitlen != host_len)
		{
			format_host(r->rtm_family, RTA_PAYLOAD(tb[RTA_GATEWAY]),
			            RTA_DATA(tb[RTA_GATEWAY]), abuf, sizeof(abuf));
		}
	printf("IP next hop: %s \n", abuf);

	printf("------- finding C2C NET ID from IPv6 address --------\n");

	for(i=3; i>=0 ; i--)
		{
			tmpbuf = strrchr (abuf, ':');
			if (tmpbuf != NULL)
				{
					c2c_id[i] = tmpbuf;
					*tmpbuf='\0';
				}
		}

	printf("C2C NET ID: %s%s%s%s\n", c2c_id[0]+1,c2c_id[1]+1,c2c_id[2]+1,c2c_id[3]+1);

	fflush(fp);
	return 0;
}



int iproute_get(char *destination)
{
	struct
	{
		struct nlmsghdr 	n;
		struct rtmsg 		r;
		char   			buf[1024];
	} req;
	inet_prefix addr;

	printf("------- lookuping routing table ---------------------\n");

	memset(&req, 0, sizeof(req));

	iproute_reset_filter();

	req.n.nlmsg_len = NLMSG_LENGTH(sizeof(struct rtmsg));
	req.n.nlmsg_flags = NLM_F_REQUEST;
	req.n.nlmsg_type = RTM_GETROUTE;
	req.r.rtm_family = preferred_family;
	req.r.rtm_table = 0;
	req.r.rtm_protocol = 0;
	req.r.rtm_scope = 0;
	req.r.rtm_type = 0;
	req.r.rtm_src_len = 0;
	req.r.rtm_dst_len = 0;
	req.r.rtm_tos = 0;

	get_prefix(&addr, destination, req.r.rtm_family);
	if (req.r.rtm_family == AF_UNSPEC)
		req.r.rtm_family = addr.family;
	if (addr.bytelen)
		{
			addattr_l(&req.n, sizeof(req), RTA_DST, &addr.data, addr.bytelen);
		}
	req.r.rtm_dst_len = addr.bitlen;

	if (req.r.rtm_dst_len == 0)
		{
			fprintf(stderr, "need at least destination address\n");
			exit(1);
		}

	ll_init_map(&rth);

	if (rtnl_talk(&rth, &req.n, 0, 0, &req.n, NULL, NULL) < 0)
		{
			printf("iproute_get: rtnl_talk failed!!\n");
			exit(2);
		}

	if (print_route(NULL, &req.n, (void*)stdout) < 0)
		{
			fprintf(stderr, "An error :-)\n");
			exit(1);
		}

}

int tun_alloc(char *dev)
{
	struct ifreq ifr;
	int fd, err;

	if( (fd = open("/dev/net/tun", O_RDWR)) < 0 )
		return -1;

	memset(&ifr, 0, sizeof(ifr));

	/* Flags: IFF_TUN   - TUN device (no Ethernet headers)
	*         IFF_TAP   - TAP device
	*         IFF_NO_PI - Do not provide packet information
	*/
	ifr.ifr_flags = IFF_TAP | IFF_NO_PI;
	if( *dev )
		strncpy(ifr.ifr_name, dev, IFNAMSIZ);

	if( (err = ioctl(fd, TUNSETIFF, (void *) &ifr)) < 0 )
		{
			close(fd);
			return err;
		}
	strcpy(dev, ifr.ifr_name);

	return fd;
}





/**
   * iplistener
   * @param void
   * @return void
   */
static void *iplistener(void *arg)
{
	char dev1[7];
	short buf[750];
	int f1,l,fm;
	fd_set fds;
	int i=0, m=0, n=0;
	__be16 src[8],dst[8];
	char destination[37];

	strcpy(dev1,"tun0");
	if ((f1 = tun_alloc(dev1)) < 0)
		{
			printf("Cannot allocate TAP device\n");
			exit(1);
		}

	printf("------- waiting packet... ---------------------------\n");
	printf("Allocated devices: %s\n", dev1);

	fm = f1 +1;

	if (rtnl_open(&rth, 0) < 0)
		exit(1);

	/*    ioctl(f1, TUNSETNOCSUM, 1);
	 *    ioctl(f2, TUNSETNOCSUM, 1); */

	while(1)
		{
			FD_ZERO(&fds);
			FD_SET(f1, &fds);

			select(fm, &fds, NULL, NULL, NULL);

			if( FD_ISSET(f1, &fds) )
				{
					l = read(f1,buf,sizeof(buf));
					printf("------- packet receive ------------------------------\n");
					printf("Got %i bytes from %s\n", l, dev1);


				/*	itsnet_ip_geobroadcast_tnl(&buf,l,295127000,81543616,5000);*/


					for(i=0; i<l ; i++)
						{

							/* TCP/IP network byte order to host byte order
							 (which is little-endian on Intel processors) */
							buf[i] = ntohs(buf[i]);

							if (i>10 && i<19)  // Parse Source address
								{
									src[m] = buf[i];
									m++;
								}

							if (i>18 && i<27)  // Parse Destination address
								{
									dst[n] = buf[i];
									n++;
								}
						}

					/*traitement du paquet selon la destination*/

                                        uint16_t val0;
                                        val0=dst[0];
                                        uint8_t dst8[2];

                                        dst8[0]=(uint8_t)(val0 >> 8);
					dst8[1]=val0 & 0xff;
					printf("dst8[0]= %x\n dst8[1]= %x\n",dst8[0],dst8[1]);

					uint16_t val4,val5,val6,val7;
                                                val4=dst[4];
                                                val5=dst[5];
                                                val6=dst[6];
                                                val7=dst[7];

                                                uint8_t dst_node_id[8];
                                                dst_node_id[0]=(uint8_t)(val4 >> 8);
                                                dst_node_id[1]=val4 & 0xff;
                                                dst_node_id[2]=(uint8_t)(val5 >> 8);
                                                dst_node_id[3]=val5 & 0xff;
                                                dst_node_id[4]=(uint8_t)(val6 >> 8);
                                                dst_node_id[5]=val6 & 0xff;
                                                dst_node_id[6]=(uint8_t)(val7 >> 8);
                                                dst_node_id[7]=val7 & 0xff;

                                                printf("dstnode ID0 = %x \n",i,dst_node_id[0]);
						printf("dstnode ID1 = %x \n",i,dst_node_id[1]);
						printf("dstnode ID2 = %x \n",i,dst_node_id[2]);
						printf("dstnode ID3 = %x \n",i,dst_node_id[3]);
						printf("dstnode ID4 = %x \n",i,dst_node_id[4]);
						printf("dstnode ID5 = %x \n",i,dst_node_id[5]);
						printf("dstnode ID6 = %x \n",i,dst_node_id[6]);
						printf("dstnode ID7 = %x \n",i,dst_node_id[7]);


						


                                        if (dst8[0]== 0xff ){

                                                itsnet_ip_geobroadcast_tnl(&buf,l,295127000,81543616,1000);
                                                printf(" c un geobroadcast en boucle IF  c\n");


                                                }
					/*else{                                               

                                                

                                                nodeID.id=dst_node_id;
                                                itsnet_ip_geounicast_tnl(&buf,l,295127000,81543616,(itsnet_node_id)dst_node_id);
			                        

						printf("c un geounicast\n");
                                		}*/
			       
					

					itsnet_ip_geobroadcast_tnl(&buf,l,295127000,81543616,1000);
                                        printf("c un broadcast numero2\n");
					}

				



			printf("------- packet infomation ---------------------------\n");
			printf("Src: %x:%x:%x:%x:%x:%x:%x:%x\n",
			       src[0],src[1],src[2],src[3],src[4],src[5],src[6],src[7]);
			printf("Dst: %x:%x:%x:%x:%x:%x:%x:%x\n",
			       dst[0],dst[1],dst[2],dst[3],dst[4],dst[5],dst[6],dst[7]);

			sprintf(&destination, "%x:%x:%x:%x:%x:%x:%x:%x",
			        dst[0],dst[1],dst[2],dst[3],dst[4],dst[5],dst[6],dst[7]);
			//iproute_get(destination);
		}

	rtnl_close(&rth);

}


/**
   * itsnet_iplistener_init
   * @param void
   * @return int
   */
int itsnet_iplistener_init(void)
{
	pthread_mutexattr_t mattrs;
	pthread_mutexattr_init(&mattrs);
	pthread_mutexattr_settype(&mattrs,PTHREAD_MUTEX_TIMED_NP);

	if (pthread_mutex_init(&mutex, &mattrs) ||
	        pthread_create(&itsnet_iplistener, NULL,iplistener , NULL))
		return -1;
	return 0;
}


/**
   * itsnet_ip_geobroadcast_tnl
   * @param short * buf
   * @param int l
   * @param uint32_t latitude
   * @param uint32_t longitude
   * @param double geo_area_size
   * @return int
   */
int itsnet_ip_geobroadcast_tnl(short * buf, int l, uint32_t latitude, uint32_t longitude,double geo_area_size)
{

	int result,i;
	struct itsnet_packet *p;
	struct itsnet_position_vector pos;

	pos=get_position_vector();
	p=(itsnet_packet*)malloc(sizeof(itsnet_packet));

	if (p==NULL)
		{
			printf("erreur allocation \n");
			result = -1;
		}
	else
		{

			memset(p,0,sizeof(itsnet_packet));
			p->common_header.protocol_info.itsnet_header_type=itsnet_geobroadcast_id;
			p->common_header.traffic_class=CLASS01;
			p->common_header.protocol_info.itsnet_header_subtype=ITSNET_GEOBCAST_CIRCLE;
			p->common_header.flags=OBU_SECURITY_ENABLED;
			p->common_header.payload_lenght=ITSNET_DATA_SIZE;
			p->common_header.hop_limit=255;
			p->common_header.forwarder_position_vector=pos;
			p->common_header.protocol_info.itsnet_next_header=ip;

			p->payload.itsnet_geobroadcast.source_position_vector=pos;
			p->payload.itsnet_geobroadcast.dest_latitude=latitude;
			p->payload.itsnet_geobroadcast.dest_longitude=longitude;
			p->payload.itsnet_geobroadcast.geo_area_size=geo_area_size;

		}


	memcpy(p->payload.itsnet_geobroadcast.payload,buf,l);
	

	result=itsnet_geobroadcast_send(p);
	//free(p);
	return result;


}

/**
   * itsnet_ip_geounicast_tnl
   * @param short * buf
   * @param int l
   * @param uint32_t latitude
   * @param uint32_t longitude
   * @param itsnet_node_id node_id
   * @return int
   */
int itsnet_ip_geounicast_tnl(short * buf, int l,uint32_t latitude, uint32_t longitude,itsnet_node_id node_id)
{

	int result;
	struct itsnet_packet *p;
	struct itsnet_position_vector pos;

	pos=get_position_vector();
	p=(itsnet_packet*)malloc(sizeof(itsnet_packet));

	if (p==NULL)
		{
			printf("erreur allocation \n");
			result = -1;
		}
	else
		{

			memset(p,0,sizeof(itsnet_packet));
			p->common_header.protocol_info.itsnet_header_type=itsnet_unicast_id;
			p->common_header.traffic_class=CLASS01;
			p->common_header.protocol_info.itsnet_header_subtype=0;
			p->common_header.flags=OBU_SECURITY_ENABLED;
			p->common_header.payload_lenght=ITSNET_DATA_SIZE;
			p->common_header.hop_limit=255;
			p->common_header.forwarder_position_vector=pos;
			p->common_header.protocol_info.itsnet_next_header=ip;

			p->payload.itsnet_unicast.source_position_vector=pos;
			p->payload.itsnet_unicast.dest_latitude=latitude;
			p->payload.itsnet_unicast.dest_longitude=longitude;
			p->payload.itsnet_unicast.dest_node_id=node_id;

		}


	memcpy(p->payload.itsnet_unicast.payload,buf,l);
	result=itsnet_geounicast_send(p);
//	free(p);
	return result;

}

/**
   * itsnet_ip_geoanycast_tnl
   * @param short * buf
   * @param int l
   * @param uint32_t latitude
   * @param uint32_t longitude
   * @param double geo_area_size
   * @return int
   */
int itsnet_ip_geoanycast_tnl(short * buf, int l, uint32_t latitude, uint32_t longitude,double geo_area_size)
{
	int result;
	struct itsnet_packet *p;
	struct itsnet_position_vector pos;

	pos=get_position_vector();
	p=(itsnet_packet*)malloc(sizeof(itsnet_packet));

	if (p==NULL)
		{
			printf("erreur allocation \n");
			result = -1;
		}
	else
		{

			memset(p,0,sizeof(itsnet_packet));
			p->common_header.protocol_info.itsnet_header_type=itsnet_geoanycast_id;
			p->common_header.traffic_class=CLASS01;
			p->common_header.protocol_info.itsnet_header_subtype=ITSNET_GEOANYCAST_CIRCLE;
			p->common_header.flags=OBU_SECURITY_ENABLED;
			p->common_header.payload_lenght=ITSNET_DATA_SIZE;
			p->common_header.hop_limit=255;
			p->common_header.forwarder_position_vector=pos;
			p->common_header.protocol_info.itsnet_next_header=ip;

			p->payload.itsnet_geoanycast.source_position_vector=pos;
			p->payload.itsnet_geoanycast.dest_latitude=latitude;
			p->payload.itsnet_geoanycast.dest_longitude=longitude;
			p->payload.itsnet_geoanycast.geo_area_size=geo_area_size;

		}


	memcpy(p->payload.itsnet_geoanycast.payload,buf,l);
	result=itsnet_geoanycast_send(p);
//	free(p);
	return result;
}

/**
   * itsnet_ip_receive
   * @param p itsnet_packet
   * @return int
   */

int itsnet_ip_receive(struct itsnet_packet *p)
{
	int result;

	int i=0,l=0;
	
	l=p->common_header.payload_lenght;
	char destination[37];

	printf("Received IP PACKET IN C2C PACKET \n");
	
			for(i=0; i<l ; i++)
				{
					printf("%2.2x : ",p->payload.itsnet_geobroadcast.payload[i]&0xFFFF);
				}



return 0;

}
